.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Religion::Bible::Regex::Reference 3pm"
.TH Religion::Bible::Regex::Reference 3pm "2009-06-01" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Religion::Bible::Regex::Reference \-  this Perl object represents a Biblical reference along with the functions that can be applied to it.
.SH "VERSION"
.IX Header "VERSION"
This document describes Religion::Bible::Regex::Reference version 0.8
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Religion::Bible::Regex::Config;
\&  use Religion::Bible::Regex::Builder;
\&  use Religion::Bible::Regex::Reference;
\&
\&  # $yaml_config_file is either a YAML string or the path to a YAML file
\&  $yaml_config_file = \*(Aqconfig.yml\*(Aq;
\&
\&  my $c = new Religion::Bible::Regex::Config($yaml_config_file);
\&  my $r = new Religion::Bible::Regex::Builder($c);
\&  my $ref = new Religion::Bible::Regex::Reference($r, $c);
\&    
\&  $ref\->parse(\*(AqGe 1:1\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is meant as a building block to enable people and publishing houses 
to build tools for processing documents which contain Bible references.
.PP
This is the main class for storing state information about a Bible reference and
can be used to build scripts that perform a variety of useful operations.  
For example, when preparing a Biblical commentary in electronic format a publishing 
house can save a lot of time and manual labor by creating scripts that do 
the following:
.IP "\(bu" 4
Automatically find and tag Bible references
.IP "\(bu" 4
Find invalid Bible references
.IP "\(bu" 4
Check that the abbreviations used are consistent throughout the entire book.
.IP "\(bu" 4
Create log files of biblical references that need to be reviewed by a person.
.PP
This class is meant to be a very general-purpose so that any type of tool that needs to manipulate Bible references can use it.
.SH "Bible Reference Types"
.IX Header "Bible Reference Types"
Bible references can be classified into a few different patterns.
.PP
Since this code was originally written and commented in French, we've retained
the French abbreviations for these different Bible reference types.
.Sp
.Vb 3
\&    \*(AqL\*(Aq stands for \*(AqLivre\*(Aq    (\*(AqBook\*(Aq in English)
\&    \*(AqC\*(Aq stands for \*(AqChapitre\*(Aq (\*(AqChapter\*(Aq in English)
\&    \*(AqV\*(Aq stands for \*(AqVerset\*(Aq   (\*(AqVerse\*(Aq in English)
.Ve
.PP
Here are the different Bible reference types with an example following each one:
.Sp
.Vb 8
\&    # Explicit Bible Reference Types
\&    LCVLCV Ge 1:1\-Ex 1:1
\&    LCVCV  Ge 1:1\-2:1
\&    LCCV   Ge 1\-2:5
\&    LCVV   Ge 1:2\-5
\&    LCV    Ge 1:1
\&    LCC    Ge 1\-12
\&    LC     Ge 1        
\&            
\&    # Implicit Bible Reference Types
\&    CVCV   1:1\-2:1
\&    CCV    1\-2:5
\&    CVV    1:2\-5
\&    CV     1:1
\&    CC     1\-12
\&    C      1
\&    VV     1\-5
\&    V      1
.Ve
.SS "Explicit and Implicit Bible Reference Types"
.IX Subsection "Explicit and Implicit Bible Reference Types"
We say the Bible reference is explicit when it has enough information within the 
reference to identify an exact location within the Bible. See above for examples.
.PP
We say that a Bible reference is implicit when the reference itself does not 
contain enough information to find its location in the Bible. often times within 
a commentary we will find implicit Bible references that use the context of the text
to identify the Bible reference.
.PP
.Vb 4
\&    in Chapter 4
\&    in verse 17
\&    see 4:17
\&    as we see in chapter 5
.Ve
.SH "INTERFACE"
.IX Header "INTERFACE"
.SS "new"
.IX Subsection "new"
Creates a new Religion::Bible::Regex::Reference. Requires two parameters a Religion::Bible::Regex::Config object and a Religion::Bible::Regex::Regex object
.SS "get_configuration"
.IX Subsection "get_configuration"
Returns the Religion::Bible::Regex::Config object used by this reference.
.SS "get_regexes"
.IX Subsection "get_regexes"
Returns the Religion::Bible::Regex::Builder object used by this reference.
.SS "get_reference_hash"
.IX Subsection "get_reference_hash"
Returns the hash that contains all of the parts of the current Bible reference.
.SS "is_explicit"
.IX Subsection "is_explicit"
Returns true if all the information is there to reference an exact verse or verses in the Bible.
.SS "set"
.IX Subsection "set"
.SS "key =head2 c =head2 v"
.IX Subsection "key =head2 c =head2 v"
.SS "key2 =head2 c2 =head2 v2"
.IX Subsection "key2 =head2 c2 =head2 v2"
.SS "ob =head2 ob2 =head2 oc =head2 oc2 =head2 ov =head2 ov2"
.IX Subsection "ob =head2 ob2 =head2 oc =head2 oc2 =head2 ov =head2 ov2"
.SS "s1 =head2 s2 =head2 s3 =head2 s4 =head2 s5 =head2 s6 =head2 s7 =head2 s8 =head2 s9"
.IX Subsection "s1 =head2 s2 =head2 s3 =head2 s4 =head2 s5 =head2 s6 =head2 s7 =head2 s8 =head2 s9"
.SS "book =head2 book2 =head2 abbreviation =head2 abbreviation2 =head2 cvs =head2 dash"
.IX Subsection "book =head2 book2 =head2 abbreviation =head2 abbreviation2 =head2 cvs =head2 dash"
.SS "set_key =head2 set_c =head2 set_v"
.IX Subsection "set_key =head2 set_c =head2 set_v"
.SS "set_key2 =head2 set_c2 =head2 set_v2"
.IX Subsection "set_key2 =head2 set_c2 =head2 set_v2"
.SS "set_b =head2 set_b2 =head2 set_oc =head2 set_oc2 =head2 set_ov =head2 set_ov2 =head2 set_cvs =head2 set_dash"
.IX Subsection "set_b =head2 set_b2 =head2 set_oc =head2 set_oc2 =head2 set_ov =head2 set_ov2 =head2 set_cvs =head2 set_dash"
.SS "set_s1 =head2 set_s2 =head2 set_s3 =head2 set_s4 =head2 set_s5 =head2 set_s6 =head2 set_s7 =head2 set_s8 =head2 set_s9"
.IX Subsection "set_s1 =head2 set_s2 =head2 set_s3 =head2 set_s4 =head2 set_s5 =head2 set_s6 =head2 set_s7 =head2 set_s8 =head2 set_s9"
.SS "abbreviation2book =head2 abbreviation2key =head2 book2abbreviation =head2 book2key =head2 book_type =head2 formatted_book =head2 formatted_book2 =head2 key2abbreviation =head2 key2book =head2 reference =head2 set_b =head2 set_b2 =head2 set_cvs =head2 set_dash =head2 set_s10 =head2 setold =head3 normalize"
.IX Subsection "abbreviation2book =head2 abbreviation2key =head2 book2abbreviation =head2 book2key =head2 book_type =head2 formatted_book =head2 formatted_book2 =head2 key2abbreviation =head2 key2book =head2 reference =head2 set_b =head2 set_b2 =head2 set_cvs =head2 set_dash =head2 set_s10 =head2 setold =head3 normalize"
Requires a hash of values to initalize the Bible reference. Optional argument a previous reference which can provide context for initializing a reference
.SS "state_is_verset"
.IX Subsection "state_is_verset"
Returns true if the current the state is \s-1VERSE\s0
.SS "state_is_chapitre"
.IX Subsection "state_is_chapitre"
Returns true if the current the state is \s-1CHAPTER\s0
.SS "state_is_book"
.IX Subsection "state_is_book"
Returns true if the current the state is \s-1BOOK\s0
.SS "begin_interval_reference =head2 	has_interval =head2 parse"
.IX Subsection "begin_interval_reference =head2 	has_interval =head2 parse"
.SS "parse_chapitre"
.IX Subsection "parse_chapitre"
.SS "parse_verset"
.IX Subsection "parse_verset"
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP """Error message here, perhaps with %s placeholders""" 4
.el .IP "\f(CWError message here, perhaps with %s placeholders\fR" 4
.IX Item "Error message here, perhaps with %s placeholders"
[Description of error here]
.ie n .IP """Another error message here""" 4
.el .IP "\f(CWAnother error message here\fR" 4
.IX Item "Another error message here"
[Description of error here]
.Sp
[Et cetera, et cetera]
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
Religion::Bible::Regex::Reference requires no configuration files or environment variables.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.IP "\(bu" 4
Religion::Bible::Regex::Config
.IP "\(bu" 4
Religion::Bible::Regex::Builder
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
None reported.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
No bugs have been reported.
.PP
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-religion\-bible\-regex\-reference@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel Holmlund  \f(CW\*(C`<holmlund.dev@gmail.com>\*(C'\fR
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2009, Daniel Holmlund \f(CW\*(C`<holmlund.dev@gmail.com>\*(C'\fR. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
