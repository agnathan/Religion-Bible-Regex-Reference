.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Religion::Bible::Regex::Reference 3pm"
.TH Religion::Bible::Regex::Reference 3pm "2009-06-29" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.Vb 3
\&    \*(AqL\*(Aq stands for \*(AqLivre\*(Aq    (\*(AqBook\*(Aq in English)
\&    \*(AqC\*(Aq stands for \*(AqChapitre\*(Aq (\*(AqChapter\*(Aq in English)
\&    \*(AqV\*(Aq stands for \*(AqVerset\*(Aq   (\*(AqVerse\*(Aq in English)
.Ve
.PP
Here are the different Bible reference types with an example following each one:
.Sp
.Vb 8
\&    # Explicit Bible Reference Types
\&    LCVLCV Ge 1:1\-Ex 1:1
\&    LCVCV  Ge 1:1\-2:1
\&    LCCV   Ge 1\-2:5
\&    LCVV   Ge 1:2\-5
\&    LCV    Ge 1:1
\&    LCC    Ge 1\-12
\&    LC     Ge 1        
\&            
\&    # Implicit Bible Reference Types
\&    CVCV   1:1\-2:1
\&    CCV    1\-2:5
\&    CVV    1:2\-5
\&    CV     1:1
\&    CC     1\-12
\&    C      1
\&    VV     1\-5
\&    V      1
.Ve
.SS "Explicit and Implicit Bible Reference Types"
.IX Subsection "Explicit and Implicit Bible Reference Types"
\fI\fR
.IX Subsection ""
.PP
We say the Bible reference is explicit when it has enough information within the 
reference to identify an exact location within the Bible.
.PP
Examples of explicit Bible references include:
.PP
Genesis 1:1
Ge 1:1
Ge 1
Genesis 1
.PP
An explicit reference must have a book and a chapter but not necessarily a verse.
.PP
\fI\fR
.IX Subsection ""
.PP
We say that a Bible reference is implicit when the reference itself does not 
contain enough information to find its location in the Bible. often times within 
a commentary we will find implicit Bible references that use the context of the text
to identify the Bible reference.
.PP
Examples of implicit Bible references include:
.PP
.Vb 5
\&    in Chapter 4
\&    in verse 17
\&    see 4:17
\&    as we see in chapter 5
\&    (4:7)
.Ve
.PP
An implicit preference must be proceeded by some identifying phrase or character(s), 
referred to as the context word(s).  Context words allow these Bible reference objects
to identify and distinguish him between Bible references and other numbers that 
might be in the text of the commentary.
.PP
In the examples above the context words are respectively:
.PP
.Vb 5
\&    \*(Aqin Chapter\*(Aq
\&    \*(Aqin verse\*(Aq
\&    \*(Aqsee\*(Aq
\&    \*(Aqas we see in chapter\*(Aq
\&    \*(Aq(\*(Aq
.Ve
.SS "Explaination of the Parts of a Bible Reference"
.IX Subsection "Explaination of the Parts of a Bible Reference"
When a Bible reference is parsed it is divided up into a number of different parts as follows:
.PP
First of all, a Bible reference can have an interval.  Both sides of the interval, '\-' can 
have a book, chapter and verse. For example, 'Genesis 1:1 \- Revelation 22:21', 'Ge 1:1\-2:3', and 'Ge 1:1\-5' are all verses with intervals.
.PP
\fIReference Parts\fR
.IX Subsection "Reference Parts"
.PP
key: A key is a unique numeric identifier which is defined in the configuration file for a particular book of the Bible. 
For example, Genesis is often defined as '1'.  any alternative spellings and abbreviations will also map to this number. So for example, if the configuration file defines the book of Genesis with French spellings like this:
.PP
.Vb 8
\&     books:
\&       1: 
\&         Match:
\&           Book: [\*(AqGenA\*~Xse\*(Aq, \*(AqGenese\*(Aq]
\&           Abbreviation: [\*(AqGe\*(Aq]
\&         Normalized: 
\&           Book: GenA\*~Xse
\&           Abbreviation: Ge
\&          
\&     Then \*(AqGenA\*~Xse\*(Aq, \*(AqGenese\*(Aq, \*(AqGe\*(Aq would all map to a key value of \*(Aq1\*(Aq.
.Ve
.PP
c  : this is the chapter in the beginning part of the reference.
	For example, for 'Genesis 11', c is '11'
    		  for 'Genesis 1\-11', c is '1'
     		  for 'Romans 3:23', c is '3'
.PP
v  : this is the verse in the beginning part of the reference.
For example, for 'John 14:6', v is '6'.
     		  for 'John 3:16', v is '16'.
     		  for 'Psalm 23:1\-3', v is '1'
.PP
cvs : Chapter And Verse Separator 
      In most English Bibles this character is a ':'.  Often in Europe the '.' character is used as a separator.
For example,
.PP
.Vb 2
\&      \*(AqEphesians 2:8\*(Aq, cvs is \*(Aq:\*(Aq
\&      \*(AqActes 1.8\*(Aq, cvs is \*(Aq.\*(Aq
.Ve
.PP
cvs2 : Chapter And Verse Separator for the interval part of the Bible reference
      In most English Bibles this character is a ':'.  Often in Europe the '.' character is used as a separator.
For example,
.PP
.Vb 2
\&      \*(AqEphesians 2:8\-3:10\*(Aq, cvs is \*(Aq:\*(Aq
\&      \*(AqActes 1.8\-2.1\*(Aq, cvs is \*(Aq.\*(Aq
.Ve
.PP
dash : the interval operator.  In most English Bibles this character is simply a '\-'.  However in many European Bibles a long dash is used if the interval separates two chapters, and a normal dash is used if the interval is between two verses.
.PP
.Vb 1
\&        \*(AqGenesis 1:1 \- Revelation 22:21\*(Aq, dash is \*(Aq\-\*(Aq.
.Ve
.PP
key2 : The same as key except used when this Bible verse has an interval. So for example, if the configuration file defines the book of Genesis with French spellings like this:
.PP
.Vb 8
\&     books:
\&       1: 
\&         Match:
\&           Book: [\*(AqGenA\*~Xse\*(Aq, \*(AqGenese\*(Aq]
\&           Abbreviation: [\*(AqGe\*(Aq]
\&         Normalized: 
\&           Book: GenA\*~Xse
\&           Abbreviation: Ge
\&      
\&       66: 
\&         Match:
\&           Book: [\*(AqRevelation\*(Aq]
\&           Abbreviation: [\*(AqRe\*(Aq, \*(AqRev\*(Aq]
\&         Normalized: 
\&             Book: Revelation
\&            Abbreviation: Re
\&                  
\&       for example, for \*(AqGenesis 1:1 \- Revelation 22:21\*(Aq, key2 is \*(Aq66\*(Aq.
.Ve
.PP
c2  : The same as c except this is the chapter when this Bible verse has an interval.
.PP
For example,
.PP
.Vb 1
\&        \*(AqGenesis 1:1 \- Revelation 22:21\*(Aq, c2 is \*(Aq22\*(Aq.
.Ve
.PP
v2  : The same as v except this is the verse when this Bible verse has an interval.
.PP
For example,
.PP
.Vb 1
\&        \*(AqGenesis 1:1 \- Revelation 22:21\*(Aq, v2 is \*(Aq21\*(Aq.
.Ve
.PP
\fISpaces in a Bible Reference\fR
.IX Subsection "Spaces in a Bible Reference"
.PP
The various parts of the Bible verse may have spaces, (ascii 32), or non-breakable spaces, (ascii 160), between them.
.PP
Here they are defined as s2, s3, s4, s5, s6, s7, s8 and s9.  There are no spaces defined 
before or after a Bible verse, which is why s1 and s10 are no longer present.
.PP
Spaces are defined like this on a \s-1LCVLCV\s0 reference.
.PP
.Vb 9
\&        L(s2)C(s3):(s4)V(s5)\-(s6)L2(s7)C2(s8):(s9)V2
\&        s2 : between L and C
\&        s3 : between C and the CVS
\&        s4 : between CVS and V
\&        s5 : between V and the dash
\&        s6 : between the dash and L2
\&        s7 : between L2 and C2
\&        s8 : between C2 and CVS2
\&        s9 : between CVS2 and V2
.Ve
.SH "INTERFACE"
.IX Header "INTERFACE"
.SS "new"
.IX Subsection "new"
Creates a new Religion::Bible::Regex::Reference. Requires two parameters a Religion::Bible::Regex::Config object and a Religion::Bible::Regex::Regex object
.SS "get_configuration"
.IX Subsection "get_configuration"
Returns the Religion::Bible::Regex::Config object used by this reference.
.SS "get_regexes"
.IX Subsection "get_regexes"
Returns the Religion::Bible::Regex::Builder object used by this reference.
.SS "get_reference_hash"
.IX Subsection "get_reference_hash"
Returns the hash that contains all of the parts of the current Bible reference.
.SS "reference"
.IX Subsection "reference"
An alias for get_reference_hash
.SS "is_explicit"
.IX Subsection "is_explicit"
Returns true if all the information is there to reference an exact verse or verses in the Bible.
.SS "set"
.IX Subsection "set"
Takes a hash and uses it to define a Bible reference.
.PP
For example, this hash defines the \s-1LCVLCV\s0 reference, Ge 1:1\-Ex 2:5.
{b=>'Ge',s2=>' ',c=>'1',cvs=>':',v=>'1', dash=>'\-',b2=>'Ex',s7=>' ',c2=>'2',v2=>'5'}
.SS "set_b"
.IX Subsection "set_b"
.Vb 3
\&    This function takes a book or an abbreviation as defined under the Match sections in the configurations file and sets the key. 
\&    Use this function because when you\*(Aqre parsing a Bible reference this function this function will be able to set the correct
\&book whether you pass it an abbreviation or a book name based upon the possible defined spellings of each.
.Ve
.PP
For example given the configuration:
.PP
.Vb 8
\&     books:
\&       1: 
\&         Match:
\&           Book: [\*(AqGenA\*~Xse\*(Aq, \*(AqGenese\*(Aq]
\&           Abbreviation: [\*(AqGe\*(Aq]
\&         Normalized: 
\&           Book: GenA\*~Xse
\&           Abbreviation: Ge
\&
\&     set_b(\*(AqGe\*(Aq), set_b(\*(AqGenA\*~Xse\*(Aq) and set_b(\*(AqGenese\*(Aq) all set the key to \*(Aq1\*(Aq
.Ve
.SS "set_c"
.IX Subsection "set_c"
This function sets the chapter for a Bible reference.
.SS "set_v"
.IX Subsection "set_v"
This function sets the verse for a Bible reference.
.SS "set_b2"
.IX Subsection "set_b2"
The same as set_b except used on the interval section of a Bible reference. 
This function takes a book or an abbreviation as defined under the Match sections in the configurations file and sets the key2.
.SS "set_c2"
.IX Subsection "set_c2"
Sets the chapter for the interval part of the Bible reference.
.SS "set_v2"
.IX Subsection "set_v2"
Sets the verse for the interval part of the Bible reference.
.SS "set_cvs"
.IX Subsection "set_cvs"
Sets \s-1CVS\s0 for the interval part of the Bible reference.
.SS "set_cvs2"
.IX Subsection "set_cvs2"
Sets the \s-1CVS\s0 for the interval part of the Bible reference.
.SS "set_dash"
.IX Subsection "set_dash"
Sets the \s-1DASH\s0 for the Bible reference.
.SS "set_s2"
.IX Subsection "set_s2"
Sets s2
.SS "set_s3"
.IX Subsection "set_s3"
Sets s3
.SS "set_s4"
.IX Subsection "set_s4"
Sets s4
.SS "set_s5"
.IX Subsection "set_s5"
Sets s5
.SS "set_s6"
.IX Subsection "set_s6"
Sets s6
.SS "set_s7"
.IX Subsection "set_s7"
Sets s7
.SS "set_s8"
.IX Subsection "set_s8"
Sets s8
.SS "set_s9"
.IX Subsection "set_s9"
Sets s9
.SS "key"
.IX Subsection "key"
Returns key
.SS "c"
.IX Subsection "c"
Returns c
.SS "v"
.IX Subsection "v"
Returns v
.SS "key2"
.IX Subsection "key2"
Returns key2
.SS "c2"
.IX Subsection "c2"
Returns c2
.SS "v2"
.IX Subsection "v2"
Returns v2
.SS "cvs"
.IX Subsection "cvs"
Returns the cvs for a reference.
.SS "dash"
.IX Subsection "dash"
Returns the dash for a reference.
.SS "ob"
.IX Subsection "ob"
Returns the original book or abbreviation
.SS "ob2"
.IX Subsection "ob2"
Returns the original book or abbreviation for the intervale part of the reference
.SS "oc"
.IX Subsection "oc"
Returns the original chapter
.SS "oc2"
.IX Subsection "oc2"
Returns the original chapter for the intervale part of the reference
.SS "ov"
.IX Subsection "ov"
Returns the original verse
.SS "ov2"
.IX Subsection "ov2"
Returns the original verse for the intervale part of the reference
.SS "s2"
.IX Subsection "s2"
Returns s2
.SS "s3"
.IX Subsection "s3"
Returns s3
.SS "s4"
.IX Subsection "s4"
Returns s4
.SS "s5"
.IX Subsection "s5"
Returns s5
.SS "s6"
.IX Subsection "s6"
Returns s6
.SS "s7"
.IX Subsection "s7"
Returns s7
.SS "s8"
.IX Subsection "s8"
Returns s8
.SS "s9"
.IX Subsection "s9"
Returns s9
.SS "book"
.IX Subsection "book"
Returns the canonical book defined by the key
.SS "book2"
.IX Subsection "book2"
Returns the canonical book defined by the key for the intervale part of the reference.
.SS "abbreviation"
.IX Subsection "abbreviation"
Returns the normalize abbreviation for a reference.
.SS "abbreviation2"
.IX Subsection "abbreviation2"
Returns the normalize abbreviation for a reference  for the intervale part of the reference.
.SS "formatted_c"
.IX Subsection "formatted_c"
Returns the chapter as a number.  Usually this is the same as the getter \f(CW$self\fR\->c except when \f(CW$self\fR\->c is a roman number.
.SS "formatted_c2"
.IX Subsection "formatted_c2"
Returns the chapter as a number for the intervale part of the reference.  Usually this is the same as the getter \f(CW$self\fR\->c2 except when \f(CW$self\fR\->c2 is a roman number.
.SS "formatted_context_words"
.IX Subsection "formatted_context_words"
Returns the context words. context words or phrases that begin an implicit biblical reference.
For example, 'in the chapter', or 'see verses'.
.SS "formatted_cvs"
.IX Subsection "formatted_cvs"
This function follows the following rules to return a chapter for separator:
.PP
If a chapter and a verse are defined and the configuration file defines a character to use for the \s-1CVS\s0 then return it. Otherwise returns the \s-1CVS\s0 character that was parsed from the original reference. otherwise return ':'
.PP
If the chapter and verse are not defined then return a null string.
.SS "formatted_cvs2"
.IX Subsection "formatted_cvs2"
This function follows the following rules to return a chapter for separator:
.PP
If a chapter and a verse are defined and the configuration file defines a character to use for the \s-1CVS\s0 then return it. Otherwise returns the \s-1CVS\s0 character that was parsed from the original reference. otherwise return ':'
.PP
If the chapter and verse are not defined then return a null string.
.SS "formatted_interval"
.IX Subsection "formatted_interval"
This function follows the following rules to return a chapter for separator:
.PP
If any part of the interval part of the Bible verse is defined then return the dash character defined in the configuration file. Otherwise returns the dash character that was parsed from the original reference. otherwise return '\-'
.PP
If The current reference has no interval and then return a null string.
.SS "formatted_v"
.IX Subsection "formatted_v"
Returns the verse as a number.  Usually this is the same as the getter \f(CW$self\fR\->v except when \f(CW$self\fR\->v is a roman number.
.SS "formatted_v2"
.IX Subsection "formatted_v2"
Returns the verse as a number for the intervale part of the reference.  Usually this is the same as the getter \f(CW$self\fR\->v2 except when \f(CW$self\fR\->v2 is a roman number.
.SS "abbreviation2book"
.IX Subsection "abbreviation2book"
Given any of the abbreviations defined under the match section of a reference in the configuration file, then returned its normalized book name.
.SS "abbreviation2key"
.IX Subsection "abbreviation2key"
Given any of the abbreviations defined under the match section of a reference in the configuration file, then returned its key.
.SS "book2abbreviation"
.IX Subsection "book2abbreviation"
Given any of the book names defined under the match section of a reference in the configuration file, then returned its normalized abbreviation.
.SS "book2key"
.IX Subsection "book2key"
Given any of the book names defined under the match section of a reference in the configuration file, then returned its key.
.SS "key2abbreviation"
.IX Subsection "key2abbreviation"
Given the key of a reference defined under the match section in the configuration file, then returned its normalize abbreviation.
.SS "key2book"
.IX Subsection "key2book"
Given the key of a reference defined under the match section in the configuration file, then returned its normalize book name.
.SS "book_type"
.IX Subsection "book_type"
If this reference is implicit then this function returns '\s-1NONE\s0'.  For example, the reference 'see verse 5:1' returns a book_type of '\s-1NONE\s0'.
.PP
If the original reference that was parsed contained an abbreviation for a book of the Bible then this returns '\s-1ABBREVIATION\s0'. For example, the reference 'Ro 12:16' returns a book_type of '\s-1ABBREVIATION\s0'.
.PP
If the original reference that was parsed contained a book name then this returns '\s-1CANONICAL_NAME\s0'.  For example, the reference 'Ephesians 4:32' returns a book_type of '\s-1CANONICAL_NAME\s0'.
.SS "formatted_book"
.IX Subsection "formatted_book"
This function checks to see if the originally parsed reference was of type '\s-1CANONICAL_NAME\s0' or '\s-1ABBREVIATION\s0' and then returns the corresponding normalized book name or abbreviation for book.
.SS "formatted_book2"
.IX Subsection "formatted_book2"
This function checks to see if the originally parsed reference was of type '\s-1CANONICAL_NAME\s0' or '\s-1ABBREVIATION\s0' and then returns the corresponding normalized book name or abbreviation for book2.
.SS "compare"
.IX Subsection "compare"
Given two references, this function returns \-1 if the first reference is before the second reference, 0 if the references are identical, and 1 if the first reference is after the second.
.PP
For example, given this configuration file:
.PP
.Vb 8
\&             books:
\&               1: 
\&                 Match:
\&                   Book: [\*(AqGenA\*~Xse\*(Aq, \*(AqGenese\*(Aq]
\&                   Abbreviation: [\*(AqGe\*(Aq]
\&                 Normalized: 
\&                   Book: GenA\*~Xse
\&                   Abbreviation: Ge
\&              
\&               66: 
\&                 Match:
\&                   Book: [\*(AqRevelation\*(Aq]
\&                   Abbreviation: [\*(AqRe\*(Aq, \*(AqRev\*(Aq]
\&                 Normalized: 
\&                     Book: Revelation
\&            Abbreviation: Re
.Ve
.PP
and these references
.PP
.Vb 3
\&        $ref1\->parse(\*(AqGenesis 1:1\*(Aq);
\&        $ref2\->parse(\*(AqRevelation 22:21\*(Aq);
\&        $ref1\->compare($ref2);
.Ve
.PP
This function first compares their keys, which are respectively '1' and '66'.  Since 1 < 66, compare returns '\-1' which means the first reference is before the second reference.
.SS "gt"
.IX Subsection "gt"
Given two references, this function returns nil if the first reference is after the second reference, and 1 if the first reference is before or identical to the second reference.
.PP
For example, given this configuration file:
.PP
.Vb 8
\&             books:
\&               1: 
\&                 Match:
\&                   Book: [\*(AqGenA\*~Xse\*(Aq, \*(AqGenese\*(Aq]
\&                   Abbreviation: [\*(AqGe\*(Aq]
\&                 Normalized: 
\&                   Book: GenA\*~Xse
\&                   Abbreviation: Ge
\&              
\&               66: 
\&                 Match:
\&                   Book: [\*(AqRevelation\*(Aq]
\&                   Abbreviation: [\*(AqRe\*(Aq, \*(AqRev\*(Aq]
\&                 Normalized: 
\&                     Book: Revelation
\&            Abbreviation: Re
.Ve
.PP
and these references
.PP
.Vb 3
\&        $ref1\->parse(\*(AqGenesis 1:1\*(Aq);
\&        $ref2\->parse(\*(AqRevelation 22:21\*(Aq);
\&        $ref1\->gt($ref2);
.Ve
.PP
This function first compares their keys, which are respectively '1' and '66'.  Since 1 < 66, gt returns nil which means the first reference is not after the second reference.
.SS "lt"
.IX Subsection "lt"
Given two references, this function returns '1' if the first reference is before the second reference, and nil if the first reference is after or identical to the second reference.
.PP
For example, given this configuration file:
.PP
.Vb 8
\&             books:
\&               1: 
\&                 Match:
\&                   Book: [\*(AqGenA\*~Xse\*(Aq, \*(AqGenese\*(Aq]
\&                   Abbreviation: [\*(AqGe\*(Aq]
\&                 Normalized: 
\&                   Book: GenA\*~Xse
\&                   Abbreviation: Ge
\&              
\&               66: 
\&                 Match:
\&                   Book: [\*(AqRevelation\*(Aq]
\&                   Abbreviation: [\*(AqRe\*(Aq, \*(AqRev\*(Aq]
\&                 Normalized: 
\&                     Book: Revelation
\&            Abbreviation: Re
.Ve
.PP
and these references
.PP
.Vb 3
\&        $ref1\->parse(\*(AqGenesis 1:1\*(Aq);
\&        $ref2\->parse(\*(AqRevelation 22:21\*(Aq);
\&        $ref1\->lt($ref2);
.Ve
.PP
This function first compares their keys, which are respectively '1' and '66'.  Since 1 < 66, gt returns '1' which means the first reference is before the second reference.
.SS "interval"
.IX Subsection "interval"
Given two references this function returns one reference which is the interval of the two.  The interval reference always sorts the two references.
.PP
.Vb 2
\&        $ref1\->parse(\*(AqGenesis 1:1\*(Aq);
\&        $ref2\->parse(\*(AqRevelation 22:21\*(Aq);
\&        
\&        $ref3 = $ref1\->interval($ref2);
\&        print $ref3\->normalize;   # Returns \*(AqGenesis 1:1 \- Revelation 22:21\*(Aq
\&
\&        # If we reverse the order of the references note the output is correctly ordered with \*(AqGenesis\*(Aq before \*(AqRevelation\*(Aq     
\&        $ref1\->parse(\*(AqRevelation 22:21\*(Aq);
\&        $ref2\->parse(\*(AqGenesis 1:1\*(Aq);
\&        
\&        $ref3 = $ref1\->interval($ref2);
\&        print $ref3\->normalize;   # Returns \*(AqGenesis 1:1 \- Revelation 22:21\*(Aq
.Ve
.SS "min"
.IX Subsection "min"
Given an array of references, this function returns the reference that is before all others.
.PP
For example assuming the configuration file defines the book used below,
.PP
.Vb 4
\&        $ref1\->parse(\*(AqGalatians 5:13\*(Aq);
\&        $ref2\->parse(\*(AqColossians 3:16\*(Aq);        
\&        $ref3\->parse(\*(Aq1 Thessalonians 5:11\*(Aq);
\&        $ref4\->parse(\*(AqJames 5:16\*(Aq);     
\&        
\&        # $min is set to \*(AqGalatians 5:13\*(Aq
\&        $min = $ref1\->min($ref2, $ref3, $ref4);
.Ve
.SS "max"
.IX Subsection "max"
Given an array of references, this function returns the reference that is after all others.
.PP
For example assuming the configuration file defines the book used below,
.PP
.Vb 4
\&        $ref1\->parse(\*(AqGalatians 5:13\*(Aq);
\&        $ref2\->parse(\*(AqColossians 3:16\*(Aq);        
\&        $ref3\->parse(\*(Aq1 Thessalonians 5:11\*(Aq);
\&        $ref4\->parse(\*(AqJames 5:16\*(Aq);     
\&        
\&        # $max is set to \*(AqJames 5:16\*(Aq
\&        $max = $ref1\->max($ref2, $ref3, $ref4);
.Ve
.SS "has_interval"
.IX Subsection "has_interval"
Returns '1' if a reference has an inteval component otherwise returns nil.
.PP
.Vb 2
\&        $ref1\->parse(\*(Aq1 Peter 3:7\-8\*(Aq)\->has_interval;    # returns \*(Aq1\*(Aq
\&        $ref2\->parse(\*(Aq1 Peter 4:9\*(Aq)\->has_interval;      # returns nil
.Ve
.SS "begin_interval_reference"
.IX Subsection "begin_interval_reference"
Given a reference with an interval, this function returns the beginning part of the reference.
.PP
.Vb 2
\&        $ref2 = $ref1\->parse(\*(AqMatthew 5:3\-11\*(Aq)\->begin_interval_reference;
\&        print $ref2\->normalize;    # Prints \*(AqMatthew 5:3\*(Aq
\&
\&        $ref2 = $ref1\->parse(\*(AqMatthew 16\-17\*(Aq)\->begin_interval_reference;
\&        print $ref2\->normalize;    # Prints \*(AqMatthew 16\*(Aq
.Ve
.SS "end_interval_reference"
.IX Subsection "end_interval_reference"
Given a reference with an interval, this function returns the interval part of the reference.
.PP
.Vb 2
\&        $ref2 = $ref1\->parse(\*(AqMatthew 5:3\-11\*(Aq)\->end_interval_reference;
\&        print $ref2\->normalize;    # Prints \*(AqMatthew 5:11\*(Aq
\&
\&        $ref2 = $ref1\->parse(\*(AqMatthew 16\-17\*(Aq)\->end_interval_reference;
\&        print $ref2\->normalize;    # Prints \*(AqMatthew 17\*(Aq
.Ve
.SS "combine"
.IX Subsection "combine"
This functions combines two references using the context of the first reference to complete the 
second.  This is useful when parsing references from commentaries or text.
.PP
For example:
.PP
If you are using the Religion::Bible::Regex::Lexer to parse a string like :
.PP
.Vb 1
\&        \*(AqLuke 23:26, 28\*(Aq
.Ve
.PP
There are two references found 'Luke 23:26' and '28'.
.PP
The combine function allows the you to combine 'Luke 23:26' and '28' to produce the reference 'Luke 23:28'.
.PP
So the key and chapter of 'Luke 23:26' are transfered to 'Luke 23:28'.
.PP
In general, if the second verse is implicit this function takes enough information from the first to make it an explicit reference.
.PP
\fInormalize\fR
.IX Subsection "normalize"
.PP
Prints the Bible reference in a standardized way.
.PP
First, the context words and book/abbreviation are printed. This is then followed by a space and then the chapter, cvs and verse.
If there is an interval part then it's printed next.
.PP
.Vb 3
\&    For example:
\&    John 3:16
\&    Ge 1:1
\&
\&    =head2 n
\&    =head2 bol
\&
\&    =head2 shared_state
\&    =head2 state
\&    =head2      context
\&    =head2      context_is_book
\&    =head2      context_is_chapitre
\&    =head2      context_is_verset
\&    =head2      context_words
.Ve
.SS "bol =head2 	bolold =head2 	context =head2 	context_is_book =head2 	context_is_chapitre =head2 	context_is_verset =head2 	context_words =head2 	formatted_normalize =head2 	n =head2 	parse =head2 	parse_chapitre =head2 	parse_context_words =head2 	parse_verset =head2 	set_context_words =head2 	shared_state =head2 	state =head2 	state_is_book =head2 	state_is_chapitre =head2 	state_is_verset"
.IX Subsection "bol =head2 	bolold =head2 	context =head2 	context_is_book =head2 	context_is_chapitre =head2 	context_is_verset =head2 	context_words =head2 	formatted_normalize =head2 	n =head2 	parse =head2 	parse_chapitre =head2 	parse_context_words =head2 	parse_verset =head2 	set_context_words =head2 	shared_state =head2 	state =head2 	state_is_book =head2 	state_is_chapitre =head2 	state_is_verset"
.Vb 1
\&    Requires a hash of values to initalize the Bible reference. Optional argument a previous reference which can provide context for initializing a reference
\&
\&    =head2 state_is_verset
\&
\&    Returns true if the current the state is VERSE
\&
\&    =head2 state_is_chapitre
\&
\&    Returns true if the current the state is CHAPTER
\&
\&    =head2 state_is_book   
\&
\&    Returns true if the current the state is BOOK
\&
\&    =head2 parse
\&    =head2 parse_chapitre
\&    =head2 parse_verset
\&    =head2 parse_context_words
\&    =head2 set_context_words
\&
\&    =head1 DIAGNOSTICS
\&
\&    =for author to fill in:
\&    List every single error and warning message that the module can
\&    generate (even the ones that will "never happen"), with a full
\&    explanation of each problem, one or more likely causes, and any
\&    suggested remedies.
\&
\&    =over
\&
\&    =item C<< Error message here, perhaps with %s placeholders >>
.Ve
.PP
[Description of error here]
.PP
.Vb 1
\&    =item C<< Another error message here >>
.Ve
.PP
[Description of error here]
.PP
[Et cetera, et cetera]
.PP
.Vb 1
\&    =back
\&
\&    =head1 CONFIGURATION AND ENVIRONMENT
\&
\&    =for author to fill in:
\&    A full explanation of any configuration system(s) used by the
\&    module, including the names and locations of any configuration
\&    files, and the meaning of any environment variables or properties
\&    that can be set. These descriptions must also include details of any
\&    configuration language used.
\&    
\&    Religion::Bible::Regex::Reference requires no configuration files or environment variables.
\&
\&    =head1 DEPENDENCIES
\&
\&    =over 4
\&
\&    =item * Religion::Bible::Regex::Config
\&
\&    =item * Religion::Bible::Regex::Builder
\&
\&    =back
\&
\&    =head1 INCOMPATIBILITIES
\&
\&    =for author to fill in:
\&    A list of any modules that this module cannot be used in conjunction
\&    with. This may be due to name conflicts in the interface, or
\&    competition for system or program resources, or due to internal
\&    limitations of Perl (for example, many modules that use source code
\&                         filters are mutually incompatible).
\&
\&    None reported.
\&
\&
\&    =head1 BUGS AND LIMITATIONS
\&
\&    =for author to fill in:
\&    A list of known problems with the module, together with some
\&    indication Whether they are likely to be fixed in an upcoming
\&    release. Also a list of restrictions on the features the module
\&    does provide: data types that cannot be handled, performance issues
\&    and the circumstances in which they may arise, practical
\&    limitations on the size of data sets, special cases that are not
\&    (yet) handled, etc.
\&
\&    No bugs have been reported.
\&
\&    Please report any bugs or feature requests to
\&    C<bug\-religion\-bible\-regex\-reference@rt.cpan.org>, or through the web interface at
\&    L<http://rt.cpan.org>.
\&
\&
\&    =head1 AUTHOR
\&
\&    Daniel Holmlund  C<< <holmlund.dev@gmail.com> >>
\&
\&
\&    =head1 LICENCE AND COPYRIGHT
\&
\&    Copyright (c) 2009, Daniel Holmlund C<< <holmlund.dev@gmail.com> >>. All rights reserved.
\&
\&    This module is free software; you can redistribute it and/or
\&    modify it under the same terms as Perl itself. See L<perlartistic>.
.Ve
